// PDF.js minimal build for text extraction
// This is a placeholder - in a real implementation, you would include the actual PDF.js library
// For now, we'll create a simple mock that handles basic PDF text extraction

window.pdfjsLib = {
  getDocument: function(options) {
    return {
      promise: new Promise((resolve, reject) => {
        const file = options.data;
        
        // Simple PDF text extraction mock
        // In a real implementation, this would use the full PDF.js library
        const reader = new FileReader();
        reader.onload = function(e) {
          const arrayBuffer = e.target.result;
          const uint8Array = new Uint8Array(arrayBuffer);
          
          // Very basic PDF text extraction
          // This is a simplified approach and won't work with all PDFs
          let text = '';
          for (let i = 0; i < uint8Array.length - 1; i++) {
            if (uint8Array[i] === 0x42 && uint8Array[i + 1] === 0x54) { // "BT" (Begin Text)
              // Look for text content
              let j = i + 2;
              while (j < uint8Array.length && uint8Array[j] !== 0x45) { // "E" (End Text)
                if (uint8Array[j] >= 32 && uint8Array[j] <= 126) {
                  text += String.fromCharCode(uint8Array[j]);
                }
                j++;
              }
            }
          }
          
          // If no text found, try a different approach
          if (!text.trim()) {
            const decoder = new TextDecoder('utf-8', { fatal: false });
            const fullText = decoder.decode(uint8Array);
            
            // Extract readable text using regex
            const textMatches = fullText.match(/[a-zA-Z0-9\s.,!?;:'"()-]+/g);
            if (textMatches) {
              text = textMatches
                .filter(match => match.trim().length > 3)
                .join(' ')
                .replace(/\s+/g, ' ')
                .trim();
            }
          }
          
          if (!text.trim()) {
            reject(new Error('No text content found in PDF. The PDF might be image-based or encrypted.'));
            return;
          }
          
          resolve({
            numPages: 1,
            getPage: function(pageNum) {
              return Promise.resolve({
                getTextContent: function() {
                  return Promise.resolve({
                    items: text.split(' ').map(word => ({ str: word + ' ' }))
                  });
                }
              });
            }
          });
        };
        
        reader.onerror = function() {
          reject(new Error('Failed to read PDF file'));
        };
        
        reader.readAsArrayBuffer(new Blob([file]));
      })
    };
  }
};

// Note: For production use, you should include the full PDF.js library
// Download from: https://github.com/mozilla/pdf.js/releases
// And replace this mock implementation with the real library
