// Mammoth.js minimal build for DOCX text extraction
// This is a placeholder - in a real implementation, you would include the actual Mammoth.js library
// For now, we'll create a simple mock that handles basic DOCX text extraction

window.mammoth = {
  extractRawText: function(options) {
    return new Promise((resolve, reject) => {
      try {
        const arrayBuffer = options.arrayBuffer;
        
        // Simple DOCX text extraction
        // DOCX files are ZIP archives containing XML files
        // This is a very basic implementation
        
        // Convert ArrayBuffer to Uint8Array
        const uint8Array = new Uint8Array(arrayBuffer);
        
        // Look for ZIP file signature
        if (uint8Array[0] !== 0x50 || uint8Array[1] !== 0x4B) {
          reject(new Error('Invalid DOCX file format'));
          return;
        }
        
        // Convert to string and look for XML content
        const decoder = new TextDecoder('utf-8', { fatal: false });
        const content = decoder.decode(uint8Array);
        
        // Extract text from XML tags
        let text = '';
        
        // Look for <w:t> tags which contain text in DOCX
        const textMatches = content.match(/<w:t[^>]*>([^<]*)<\/w:t>/g);
        if (textMatches) {
          textMatches.forEach(match => {
            const textContent = match.replace(/<w:t[^>]*>/, '').replace(/<\/w:t>/, '');
            if (textContent.trim()) {
              text += textContent + ' ';
            }
          });
        }
        
        // If no w:t tags found, try a more general approach
        if (!text.trim()) {
          // Look for any text between XML tags
          const generalMatches = content.match(/>([^<]+)</g);
          if (generalMatches) {
            generalMatches.forEach(match => {
              const textContent = match.replace(/^>/, '').replace(/<$/, '').trim();
              if (textContent.length > 2 && /[a-zA-Z]/.test(textContent)) {
                text += textContent + ' ';
              }
            });
          }
        }
        
        // Clean up the text
        text = text
          .replace(/\s+/g, ' ')
          .replace(/[^\w\s.,!?;:'"()-]/g, '')
          .trim();
        
        if (!text) {
          reject(new Error('No text content found in DOCX file'));
          return;
        }
        
        resolve({
          value: text,
          messages: []
        });
        
      } catch (error) {
        reject(new Error('Failed to extract text from DOCX file: ' + error.message));
      }
    });
  },
  
  convertToHtml: function(options) {
    // Simplified HTML conversion
    return this.extractRawText(options).then(result => {
      return {
        value: '<p>' + result.value.replace(/\n/g, '</p><p>') + '</p>',
        messages: result.messages
      };
    });
  }
};

// Alternative simple DOCX text extractor using JSZip approach
window.mammoth.simpleExtract = function(arrayBuffer) {
  return new Promise((resolve, reject) => {
    try {
      // This is a very basic DOCX text extraction
      // For production use, include the full Mammoth.js library
      
      const uint8Array = new Uint8Array(arrayBuffer);
      const decoder = new TextDecoder('utf-8', { fatal: false });
      
      // Try to find readable text in the binary data
      let text = '';
      let currentWord = '';
      
      for (let i = 0; i < uint8Array.length; i++) {
        const byte = uint8Array[i];
        
        // Check if byte represents a printable ASCII character
        if (byte >= 32 && byte <= 126) {
          currentWord += String.fromCharCode(byte);
        } else {
          // End of word
          if (currentWord.length > 2 && /[a-zA-Z]/.test(currentWord)) {
            text += currentWord + ' ';
          }
          currentWord = '';
        }
      }
      
      // Add final word
      if (currentWord.length > 2 && /[a-zA-Z]/.test(currentWord)) {
        text += currentWord;
      }
      
      // Clean up text
      text = text
        .replace(/\s+/g, ' ')
        .replace(/[^\w\s.,!?;:'"()-]/g, '')
        .trim();
      
      if (text.length < 10) {
        reject(new Error('Insufficient text content found in DOCX file'));
        return;
      }
      
      resolve({ value: text });
      
    } catch (error) {
      reject(error);
    }
  });
};

// Note: For production use, you should include the full Mammoth.js library
// Download from: https://github.com/mwilliamson/mammoth.js/releases
// And replace this mock implementation with the real library
